<!DOCTYPE html> 
<html>
<head>
  <meta charset="UTF-8">
  <title>문서 객체 조작</title> <!-- 조작이라기 보다는 변화를 줄 수 있는 방법의 기능들을 살펴볼 예정임. -->
  
  <style type="text/css">
     .first {color:red;}
     .second {color:pink;}
     .third {color:orange;}
  </style>
  
  <script src="./js/jquery-3.6.3.js"></script> <!-- 까먹지 않고 계속적으로 타이핑하기. -->
  <script type="text/javascript">
/* 1. 문서 객체의 클래스 속성 추가 
// - addClass() : 문서 객체의 클래스 속성을 추가. -> 선택자 리뷰에서도 살펴봤었음.
//                클래스를 동적인 효과로써 부여해줄 수 있었음.
    // 예제1. 매개변수에 문자열 입력.
	$(function(){
		$('h1').addClass('item');
		//입력으로 item이라는 정보를 넣어줌. => 기존 코드에는 속성을 적용하지 않았지만 최종 코드에는 class라는 속성에 item이라는 값이 넣어짐.
		//입력으로 문자열 데이터를 전달하면 내부에서는 class라는 속성에 그 입력의 문자열 데이터를 넣어주면서 추가해준다는 것을 알 수 있음.
		//즉, addClass()메소드는 선택되어진 태그 코드에 클래스속성을 추가해주는 메소드임.
		
	});
	
    // 예제2. 매개변수에 함수 입력.
    $(function(){ //addClass메소드 => 함수를 전달하면서 서로 다른 이름의 클래스 이름을 추가할 수 있는 것임.
    	$('h1').addClass(function(index){ 
    		//addClass()는 몇번째 h1이였는지에 대한 값도 함께 전달을 하기 때문에 첫번째 h1을 만나면 0의 정보를 만났다고 하면서 함수를 호출하는 구조이다.
    		return 'item_'+index; //이름은 같지만 index값이 순차적으로 전달이 되어지므로 최종적으로 중복되지 않도록 클래스의 속성을 부여할 수 있게 된다.
    	});
    });
*/

/* 2. 문서 객체의 클래스 속성 제거 
// - removeClass(): 문서 객체의 클래스 속성을 제거.
// - 여러 개의 클래스 속성 중 선택적으로 제거.
	
	$(function(){
		$('h1').removeClass('item'); 
		//removeClass메소드는 'h1'태그에서 'item'이라고 정의되어져 있는 클래스 속성을 만나면 그 클래스 속성을 제거해달라는 기능임!!
	});
*/


/* 3. 문서 객체의 속성 검사 
// - attr(): .속성과 관련된 모든 기능 수행.
//           .첫번째 문서 객체의 속성 출력.
	
	$(function(){
		var src = $('img').attr('src');
		//태그 선택자로 img를 선택 후 attr()메서드 호출 => 입력으로 src 속성을 넣어줌
		//attr(): 태그(img)가 여러 개 있다고 하더라도 처음에 만나는 문서객체에 해당되어지는 value 값만 읽어오게끔 기능을 제공해주고 있는 것이다.
		//        => 태그의 속성 값을 파악하기 위해서 확인하고자 할 때 활용한다.
		//주의) 모든 정보를 다 알려주는 것이 아닌 첫번째로 만나는 문서객체의 값을 읽어온다.
		
		alert(src); //첫번째 이미지의 src속성에 담겨져 있는 value값을 읽어와준다는 것을 결과로 알 수 있다.		
	});
*/	



/* 4. 문서 객체의 속성 추가 -> !!속성과 관련된 모든 처리는 attr()메서드가 담당하고 있음!! 
// - attr() 메서드 사용.
// - 3가지 형태로 사용.

	$(function(){
// [속성을 추가하는 형태]
//	1) $(selector).attr(name, value);
		//$('img').attr('width', '200'); //결과: 모든 이미지들이 200이라는 사이즈로 리사이징이 되어 화면상에 출력되고 있음
		//3개의 img가 모두 선택됨 -> attr('속성의 이름', '그 속성의 값')으로 지정해주도록 한다.

//	2) $(selector).attr(name, function(index){}); -> 두번째 매개변수에 함수를 넣어줌.
//     속성의 값에서 사용자 지정 함수를 통해 기능을 달리하여 구성할 수 있다. 
//     즉, 함수를 통해 전달되어지는 index값에 따라 독립적인 기능을 적용시킬 수 있다!!
		//$('img').attr('width', function(index){
			//- img태그를 만나게 되면 함수가 호출이 됨 -> 첫번째 태그일 경우 0이 전달됨
			//return (index + 1) * 100; //이미지 축소의 개념으로 정의한 것임
		//}); //함수를 전달하면서 위 기능을 전달하게 되면 첫번째 이미지는 100, 두번째 이미지는 200, 세번째 이미지는 300이 되면서 출력이 되어질 것이다.
		    //각각의 이미지의 크기를 달리하면서 출력할 목적으로 작성된 코드임


//	3) $(selector).attr(object); -> 입력으로 객체를 전달
		$('img').attr({ 
		//객체는 key와 value값을 통해 정의하는 형식이기 때문에 그 형식 그대로 속성을 부여할 수 있다.
		//key에 속성의 이름을 넣어주고, value의 값은 메서드 혹은 고정된 값으로 넣어줄 수 있다.
			width: function(index){
				return (index + 1) * 100; 
			}, //값으로 함수를 넣어줄 때는 attr메서드에서 함수로 매개변수가 들어갔을 때랑 동일하게 정의를 해주도록 한다.
			height: 100 //고정된 값을 넣어줌	
		}); 
	}); //결과: 너비와 높이의 두 개의 속성 값을 지정하면서 이미지 왜곡이 생긴 결과 창이 출력되고 있음
*/
	
	
/* 5. 문서 객체의 속성 제거 
// - removeAttr(name):문서 객체의 속성을 제거해주는 메서드.
	
	$(function(){
		$('h1').removeAttr('data-index'); //removeAttr메서드의 입력으로 사용자가 임의로 부여해준 속성의 이름(data-index)을 넣어주도록 한다.		
	}); //결과적으로 속성자체가 태그에서 제거되고 있는 것을 결과 창으로 확인할 수 있다.
*/


/* 6. 문서 객체의 스타일 검사 
// - css(): 스타일과 관련된 모든 기능을 수행.
	
	$(function(){
		var color = $('h1').css('color'); //css에서 color에 대한 값을 읽어오도록 함.
		// css메소드도 적용되고 있는 속성중에 color의 값을 읽어오라고 하면 
		// => 첫번째로 만나는 h1의 color의 value값을 반환해오고 있다.		
		alert(color); //첫번째 요소의 rgb값이 출력됨(rgb(255, 0, 0))
			
	}); // -> 스타일에 대한 속성의 값을 검사할 때 활용하도록 한다.
*/


/* 7. 문서 객체의 스타일 추가 - css메서드를 활용
//- 사용형태 3가지 (attr()와 동일한 형태로 제공을 해주고 있음.)
$(function(){
// 1) $(selector).css(name, value);
		//$('h1').css('color', 'blue'); //모든 h1에 텍스트 색상을 파란색으로 적용하도록 함
		//소스코드에 가보면 body부분에 style로 속성이 적용되어지고 있음
		//css메소드로 속성의 이름과 그때 적용할 수 있는 값으로 전달하여 처리할 수 있다.

// 2) $(selector).css(name, function(index) { });
//   . 선택자로 선택한 문서 객체에 개별적으로 스타일 속성을 적용하고 싶을 때 사용하는 방법.
//   . 함수를 이용하면 그 안에 적용되는 기능에 따라서 다양한 효과를 부여할 수 있는 것임 => 지금은 어떠한 효과를 줄 수 있는지를 실습으로 확인해보는 것임.
		
		var color = ['red', 'green', 'blue']; //세개의 값을 저장하는 배열변수를 선언 
		
		$('h1').css('color', function(index){ //두번째 매개변수로 함수를 전달하면 프로그래머가 다양한 기능을 지정해줄 수 있음!!
			return color[index]; //h1태그를 index에 따라서 color를 독립적으로 색상이 적용하도록 한다. (첫번째 h1은 red, 두번째 h1은 green, 세번째 h1은 blue로 적용됨)
		}); 

// 3) $(selector).css(object);
	var color = ['red', 'green', 'blue']; 
	
	$('h1').css({ //매개변수를 객체로 전달을 하게 되면 여러 속성들을 map의 형태로 정의해줄 수 있음
		color:function(index){ return color[index]; }, //2)에서 정의했던 부분이랑 동일하게 해석하면 됨.
		background:'black' //추가적인 속성을 지정해주도록 함.
	}); //객체는 필드에 제한이 없기 때문에 여러 속성의 값들을 적용을 하면서 
	    //해당 선택자에 선택되어진 태그에 다양한 효과를 부여해줄 수 있다!!
	
});
*/

/* 8. 문서 객체의 내부 검사 
$(function(){
//- 기존 자바스크립트에서 문서 객체의 innerHTML 속성과 관련된 jQuery 메서드.
//- 1) html(): 문서 객체 내부의 글자와 관련된 모든 기능을 수행.

	var html = $('h1').html(); //반환되어지는 값을 통해서 html기능을 확인해 볼 예정
	alert(html); //Header-0 => 첫번째 h1에 텍스트노드에 있는 문자열에 대한 데이터를 반환해주는 것을 확인해볼 수 있다.
	//추가를 할 수 있지만 속성과 관련된 검사에 대한 기능으로 메서드를 그대로 활용할 수 있는 것임


//- 2) text(): html()과 유사하게 동작되어지는 메서드로써 추가적인 제공을 해줌.
//   . 문서 객체 내부의 글자와 관련된 모든 기능을 수행.
//   . 선택자로 선택한 모든 문서 객체의 글자를 가져와 출력.
	
	var text = $('h1').text(); 
	alert(text); //Header-0Header-1Header-2 => 모든 h1에 텍스트노드에 있는 문자열에 대한 데이터를 연속으로 반환해줌.
	
	//[html과 text ↓]
	//=> 문자열 데이터를 읽어와주는 기능이라는 것은 동일함.
	//하지만, html을 호출하면 만나는 첫번째 h1의 정보만을 보여주면서 기다리게 되고,
	//        text로 호출을 하게 되면 모든 h1을 검색해서 텍스트의 형태로 반환을 해주고 있다.

});
*/

/* 9. 문서 객체의 내부 추가 => html()과 text()를 활용할 수 있음
// 1) $(selector).html(value); 
//       -> HTML 태그를 인식해 문자열 삽입.

	$(function(){
		$('div').html('<h1>$().html()</h1>'); //태그로 인식하여 동작이 되면 h1태그 안이 문자열로 인식될 것임
	 	//결과적으로 div태그에 html입력으로 작성해줬던 코드들이 태그로 인식되어 삽입이 되어지고 있다는 것을 확인해 볼 수 있다.
	
//    $(selector).text(value); 
//       -> HTML 태그를 인식하지 않음.
		
		$('div').text('<h1>$().html()</h1>'); 
		//text입력으로 넣어준 코드들이 태그로 인식이 되어지는 것이 아니라 텍스트(문자열) 자체로 인식이 되어진다는 것을 결과창으로 확인할 수 있다.
	});

//  2) $(selector).html(function(index, html){}); //입력으로 함수를 전달할 수 있게끔 기능이 오버로딩 되어 있음 
//     $(selector).text(function(index, html){}); 
    
    //[html적용 - 태그로 인식]
    $(function(){
    	$('div').html(function(index, html){
    		return '<h1>Header - '+index+'</h1>'; //h1을 태그로 적용하기 때문에 제목의 형태로 인덱스값만 달리하여 결과값을 확인할 수 있다.
    	});
    	
    });
    	
    //[text적용 - 텍스트로 인식]
    $(function(){
    	$('div').text(function(index, html){
    		return '<h1>Header - '+index+'</h1>'; //태그의 형태가 아닌 텍스트의 형태로 출력이 되는 것을 확인해볼 수 있다.
    	});
    	
    });
   */
      		
/* 10. 문서 객체의 내부 제거
// 1) remove(): 특정 문서 객체를 제거.
// 2) empty() : 특정 문서 객체의 후손을 모두 제거.
// css에서도 display로 동일하게 환경을 제공을 해주고 있었음. 하지만 css는 정적으로 하여 처리를 해줄 수 있을 뿐이지 수행하는 과정에서 동적인 처리를 하기에는 어려움이 있음
	
	//[remove()메소드]
	$(function(){
		$('h1').first().remove(); //첫번째 h1을 제거함.
	}); //remove()를 활용하면 특정 문서 객체가 사라지게 하는 효과를 가져갈 수 있음
	
	//[empty()메소드]
	$(function(){
		$('div').first().empty(); 
	}); //empty(): div(선택되어진 태그)에 후손으로 있는 모든 태그들을 제거함.(div안에 있는 모든 요소들이 대상으로 선택됨)
*/
	
/* 11. 문서 객체의 생성(1)  
//- 텍스트 노드를 갖는 문서 객체를 생성하는 방법.
//- $(): 문서 객체 생성.
//- $() 함수의 매개 변수에 HTML 태그를 문자열로 넣기만 하면 문서 객체가 생성됨.
//- 자바스크립트에서는 문서객체를 생성하려면 태그하나만 생성하려고 해도 createElement로 생성을 하고 
//  텍스트 노드가 있다면 createTextNode를 생성하고 이 둘을 연결하고, 출력의 위치를 연결해줘야 하는 번거로운 코드를 구성했어야 했음.

//- 생성한 문서 객체를 body 태그에 추가하는 방법1.
	//$(document).ready(function(){});
	
	$(function(){
		//태그를 추가하고 싶다고 할 때는 추가할 태그를 입력으로 넣어주면 된다. => jQuery가 자동인식을 함. (createElement와 동일한 효과)
		$('<h1></h1>').html('Hello jQuery!').appendTo('body');
		//h1은 텍스트노드가 삽입이 되어야 의미가 있음 
		//-> 메서드 체이닝 방식을 통해 html메서드를 호출하여 삽입할 텍스트를 넣어주도록 한다. (createTextNode와 동일한 효과)
		//-> jQuery는 자체적으로 연결을 해주기 때문에 별도로 작업을 수행할 필요가 없음!!
		//-> 출력의 위치는 appendTo()메서드를 이용해서 태그를 지정해주도록 한다.
		//   appendTo는 입력으로 지정한 태그를 기준으로 자식으로 넣어주겠다는 의미이다.
		//즉, jQuery를 이용하면 자바스크립트에서의 번거로웠던 코드에서 간단하게 한줄로 코드를 작성할 수 있게 되는 것이다. (+) 더 직관적임, 메소드를 기억해야 하는 부담감도 덜어짐.
		
	});
	

//- $() 메서드의 내부에 HTML 태그를 바로 넣어 body 태그에 추가하는 방법2 => 위 1방법보다 더 간단해짐.
	$(function(){
		$('<h1>Hello jQuery</h1>').appendTo('body'); //body태그 뒤에 추가함.
		//html을 생략하여 완성된 구문을 jQuery함수에 호출 시에 넣어주면서 appendTo에 지정한 영역에 추가해달라는 의미를 전달하게 된다. => 더 간결한 코드를 작성할 수 있음.	
	});
	*/

/* 12. 문서 객체의 생성(2) 
//- 텍스트 노드를 갖지 않는 문서 객체(고유속성을 가지고 있음)를 생성하는 방법. ex)자바스크립트에서는 img태그로 실습을 했었음
//  -> 따라서 attr()의 메소드를 활용하여 값을 부여하도록 한다.
	
	$(function(){
		$('<img />').attr('src', 'img/Koala.jpg').appendTo('body');
		//이미지 태그를 추가할 때 이전에 컨셉과 동일함 (img태그는 src속성을 지정해줘야 의미를 가짐.)
		//jQuery에서 속성과 관련된 처리를 해주는 메서드는 attr()로 처리함.
		//이후에 appendTo메서드를 통해 추가될 영역을 지정하여 추가하도록 한다.
	});
	
	$(function(){ 
		$('<img />').attr({ //attr()메소드에서 객체로 전달을 하게되면 다양한 속성을 한번에 적용을 할 수가 있음 (바로 속성을 지정하도록 하면 한 가지의 속성만 지정할 수 있음)
			src:'img/Koala.jpg',
			width:'350',
			height:'250'
		}).appendTo('body');
		
	});
	*/


/* 13. 문서 객체의 삽입(1) => 다양한 메서드로 정의를 해서 제공을 해줌으로써 다양한 위치에 삽입할 수 있는 방법들을 제공 */
//- $(A).appendTo(B)  : A를 B의 뒷 부분(자식 요소)에 추가한다.
//- $(A).prependTo(B)  : A를 B의 앞 부분(자식 요소)에 추가한다. => body로 지정하면 안됨.(body앞에 태그가 올 수 없음)
//- $(A).insertAfter(B)  : A를 B의 뒤(형제요소)에 추가한다.     => 대등한 관계로 바라봄. 나란히 앞이나 뒤에 붙이는 것임
//- $(A).insertBefore(B)  : A를 B의 앞(형제요소)에 추가한다.


/* 14. 문서 객체의 삽입(2) => (1)에서 주체가 바뀌는 것임 => 주체가 A임 
//     이름이 간단해서 주로 많이 사용됨.
//- $(A).append(B) : B를 A의 뒷 부분(자식 요소)에 추가한다. =>(A)에 body가 들어가면 됨.
//- $(A).prepend(B) : B를 A의 앞 부분에 추가한다.           =>앞에 자식으로 붙이겠다는 의미
//- $(A).after(B)    : B를 A의 뒤에 추가한다.               =>대등한 관계. 
//- $(A).before(B)   : B를 A의 앞에 추가한다.

//- 모든 메서드 사용 방법 동일
//- 1. $(selector).append(content, content, ....... , content) : 갯수의 제한 없이 얼마든지 추가할 수 있는 첫번째 형식.
	
	$(function(){
		var h1 = '<h1>Header 1</h1>';
		var h2 = '<h2>Header 2</h2>';
		
		$('body').append(h1, h2, h1, h2); //=> 갯수는 제한이 없음
		//append일 때는 주체가 앞에 옴. body의 자식으로 지정해준 변수의 태그들을 추가해달라는 의미이다.
		//=> body에서 맨 하단에 추가됨!!
	});
*/

//- 2. $(selector).append(function(index, value){}); //append메서드에 함수를 전달하게끔 정의가 되어져 있음


//- 3. 

	

/* 15. 문서 객체의 이동 */
//- 기존에 존재하는 문서 객체를 선택하고 문서 객체 삽입 메서드를 사용하면, 문서 객체를 쉽게 다른 곳으로 이동시킬 수 있다.



/* 16. 문서 객체의 복제 */
//- 기존 문서 객체를 선택하고 문서 객체 삽입 메서드를 사용하면, 문서 객체가 이동.


//=========
//- clone() : 문서 객체 복제.
//- $(selector).clone()
//  $(selector).clone(Boolean dataAndEvents)
//  $(selector).clone(Boolean dataAndEvents, Boolean deepDataAndEvents)
              


	
</script>
</head>

<body>

<!-- 1. 문서 객체의 클래스 속성 추가 
    <h1>Header-0</h1>
    <h1>Header-1</h1>
    <h1>Header-2</h1>
-->

<!-- 2. 문서 객체의 클래스 속성 제거 
    <h1 class="item">Header-0</h1>
    <h1 class="item select">Header-1</h1>
    <h1 class="item">Header-2</h1>
-->

<!-- 3/4. 문서 객체의 속성 검사/추가 
    <img src="img/Koala.jpg" />
    <img src="img/Penguins.jpg" />
    <img src="img/Tulips.jpg" />
-->

<!-- 5. 문서 객체의 속성 제거: 
     속성에 'data-'의 접두어가 들어가면 공식적인 속성이 아닌 프로그래머 혹은 개발자가 새롭게 추가해주고 있는 속성이 된다.
     !!속성 이름을 보면서 체크를 하도록 해야한다!! 
    <h1 data-index="0">Header-0</h1>
    <h1 data-index="1">Header-1</h1>
    <h1 data-index="2">Header-2</h1>
-->

<!-- 6. 문서 객체의 스타일 검사
    <h1 class="first">Header-0</h1>
    <h1 class="second">Header-1</h1>
    <h1 class="third">Header-2</h1>
-->

<!-- 7/8. 문서 객체의 스타일 추가 
    <h1>Header-0</h1>
    <h1>Header-1</h1>
    <h1>Header-2</h1>
-->

<!-- 9-1. 문서 객체의 내부 추가
    <div></div>
    <div></div>
    <div></div>
 -->

<!-- 9-2. 문서 객체의 내부 추가 -->
    <h1>Header-0</h1>
    <h1>Header-1</h1>
    <h1>Header-2</h1>


<!-- 10. 문서 객체의 내부 제거
    <div>
        <h1>Header-0</h1>
        <h1>Header-1</h1>
    </div>
 -->

<!-- 14. 문서 객체의 삽입(2)  
    <div>
       <b>데이터</b>
       <ul id="name_region"></ul>
    </div> 
   -->

<!-- 14. 문서 객체의 삽입(3)
    <header>
    	<h1>데이터</h1>
    </header>
 -->

<!-- 15. 문서 객체의 이동 
    <img src="img/Chrysanthemum.jpg" />
    <img src="img/Desert.jpg" />
    <img src="img/Hydrangeas.jpg" />
    <img src="img/Koala.jpg" />
    <img src="img/Penguins.jpg" />
    <img src="img/Tulips.jpg" />
-->

<!-- 16. 문서 객체의 복제 
    <h1>HEADER</h1>
    <hr />
    <div></div>
    <hr />
-->
	<hr>
	<!-- 브라우저에서는 어떻게 처리되기 때문에 어떤 경우에는 태그로 인식되고 어떤 경우에는 문자열로 인식이 되고 있는가?
		 번외) 브라우저 상에는 <h1> 태그가 보여지지 않고 헤더의 역할로써 진한 글씨체로 큰 사이즈의 글씨를 보여주고 있음
			   브라우저는 <를 만나는 즉시 태그로 인식함. 따라서 브라우저 상에서 그대로 출력이 안됨
	           태그로 동작을 시키는 것이 아니라 이 모양 그대로 브라우저에 문자열처럼 똑같이 출력을 하고 싶다면 우리가 어떻게 해줄 수 있을까?
	           이 부분이 text() 메서드가 동작을 해주고 있던 기능이였음. 이 부분을 더 살펴볼 예정이다. -->
	<h1>jQuery</h1> 
	&lt;h1&gt;jQuery&lt;/h1&gt;
	<!-- 브라우저는 &lt;를 만나면 <로 표시를 해준다.
	                >는 &gt;로 약속을 해놓음!!      
	     즉, text()메소드는 <와 >를 만났을 때 &lt;와 &gt;로 변환을 해주면서 출력을 해주는 것이다.
	         html()메소드는 변환하지 않고 그대로 실행을 함 => 이렇듯 text와 html은 내부적인 차이점을 가지고 있는 것이다. -->
	

</body>
</html>