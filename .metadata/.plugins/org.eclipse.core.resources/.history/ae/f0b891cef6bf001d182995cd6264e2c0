<!-- 자바스크립트의 코드들을 일일히 작성하여 작업하기에는 번거로움이 있음.
     자주 사용하는 기능들을 묶음으로 제공하는 라이브러리가 있음
	 
	 기능의 묶음을 라이브러리라고 부름. 
     자바스크립트의 대표적인 라이브러리가 jQuery로 제공을 해주고 있음
     => jQuery는 별도로 다운로드를 받아서 사용을 해야 한다. -->

<!-- jQuery 기본
	1. jQuery 개요
		- 모든 브라우저에서 동작하는 클라이언트 자바스크립트 라이브러리. (기능의 묶음)
		- 다음의 기능을 위해 제작
			. DOM(문서객체모델)과 관련된 처리를 쉽게 구현 => 개발자가 구현해야하는 부분을 미리 구현하여 다양한 메소드를 제공을 해줌으로써 쉽게 사용할 수 있도록 함.
			. 일관된 이벤트 연결을 쉽게 구현 => 일관된 메서드로 제공을 해주기 때문임
			. 시각적 효과를 쉽게 구현
			. ajax 애플리케이션을 쉽게 구현

		- https://jquery.com => min으로 되어 있는 것이 압축된 버전임
		  압축이 되어져 있는 버전(여백이 없음)과 압축이 되어져 있지 않은 버전(여백이 있음)의 차이점은 여백에 대한 차이점만 있음
		  따라서 압축된 버전이든 압축이 되지 않은 버전이든 동작상에 차이가 없기 때문에 둘 중에 하나를 알아서 사용하면 됨
		  
		- jQuery 사용 방법
			1) 직접 다운받아 사용하는 방법. 
			2) CDN 호스트 사용하는 방법.
			   -> 꼭 라이브러리를 다운받아서 처리를 해야하는 것은 아니다.
			      네트워크만 연결이 되어져 있다면 실시간적으로 읽어오면서 처리할 수 있음
				 . Content Delivery Network
				 . 사용자에게 간편하게 콘텐츠를 제공하는 방식을 의미.
				 . 구글, 마이크로소프트, jQuery측에서 사용자가 jQuery를 사용하기 편하게 콘텐츠를 제공.
-->


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jQuery 태그 구조</title>
  
<!-- 9. jQuery를 사용한 배열 관리(2)를 위한 예제 --> 
<style type="text/css">
	.high-light { background:yellow; }
	.high-light-0 { background:yellow; }
	.high-light-1 { background:orange; }
	.high-light-2 { background:blue; }
	.high-light-3 { background:green; }
	.high-light-4 { background:red; }
</style>
  
<!-- 방법1. 직접 라이브러리를 다운로드 받아서 import를 해주는 방법 -->
<script src="./js/jquery-3.6.3.js"></script> 
<!-- 
	 지정된 파일의 코드 전체가 포함되어지는 것이다. 
     이렇게 포함이 되어지면 아래에 포함된 코드들이 
     다이렉트로 파일에 포함된 기능들을 사용할 수 있게 되는 것이다.
     
     라이브러리 사이즈가 초경량사이즈임!! -> 따라서 프로젝트를 진행할 때 별도의 파일을 통해 포함시키도록 한다.
     또한, 네트워크에 상관없이 작업이 가능하다는 장점을 가지고 있음. 
-->
     
<!-- 방법2. CDN 방식 : 홈페이지에서 제공하는 URL만 잘 걸어두면 됨.
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script> 구글사 
 -> 라이브러리를 다운로드하지 않더라도 홈페이지 내에서 제공하는 링크를 걸어서 사용할 수 있다.
    전제 조건) 컴퓨터가 네트워크에 연결이 되어 있어야만 해당 기능들을 사용할 수 있다. -> 단점임(네트워크가 연결 안될 시 동작이 안됨) 

or <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.6.3.js"></script> 마이크로소프트사 
-->

<script type="text/javascript">
/* 1. 라이브러리 포함 방법 : 2가지 방식 */
// - 방법1. 방법2 참조

/* 2. jQuery를 사용한 웹 페이지 형식   
//window.jQuery = window.$ = jQuery; => 라이브러리 소스 마지막에 작성되어져 있었음
//원래 자바스크립트는 jQuery라는 함수를 공식이름으로 제공을 해주고 있다.
//jQuery라고 전부 다 타이핑을 하면 함수를 호출할 때마다 이 이름을 다 타이핑을 해야하기 때문에
//window객체에 $라는 특수문자를 이용해서 이름을 등록해주도록 했다.
//그렇게 window에도 jQuery라는 이름을 등록하고 있는 것이다.
//window객체에서 제공해주고 있는 메소드들인 alert, prompt, confirm을 호출하려면 window.을 통해 호출을 해야했지만 window객체의 브라우저에 한해서 생략이 가능했었다!! 
//그렇기 때문에 window객체의 표시로 등록을 해뒀기 때문에 jQuery를 사용할 때 $기호를 하나로 동일한 동작이 되게끔 정의를 해준 것이다.

// jQuery와 자바스크립트는 밀접한 관계를 가지고 있음
// jQuery도 특정 태그에 접근해서 동적효과를 부여하고 싶은 것이기 때문에 body영역을 전제적으로 다 읽고난 이후에 부여해야 하는 것이다.
// => body영역이 다 올라오고 난 다음에 정적인 화면에 추가적인 태그들을 덧붙이거나 수정하거나 제거하는 동적효과를 부여하고자 하는 것이 자바스크립트의 사용목적임
// [jQuery의 호출 방법]
//	 - jQuery()
//	 - $(document).ready(function(){}); : 자신이 필요로 하는 동작을 입력으로 document객체를 전달받아 처리되어지게끔 한다.
//		.문서가 준비 완료되면 매개변수로 전달된 함수를 실행하라는 의미.
//		.많이 사용되어지는 메소드이다 보니까 $(function(){});로 간단한 형식으로도 정의해서 사용을 하게끔 융통성을 발휘해준다.
//   위 함수를 호출하면 jQuery의 객체를 반환해준다. (자신의 작업을 수행할 수 있는 주체가 되는 객체를 반환해주는 것임)
//   - jQuery객체의 메소드 중에 ready()가 있음_ready()는 이벤트 함수임(입력으로 함수를 전달받음)!! 
//     => 기능은 body영역을 다 읽어갔을 때 jQuery가 감시하고 있다가 다 읽어간 순간 입력으로 전달한 함수를 실행하도록 한다.


//ready()메소드도 입력으로 전달받은 함수를 잘 보관하고 있게됨 => 실행하면 body를 감시하다가 다 읽어간 순간 입력으로 전달받은 함수를 한번만 호출해줌
//자바스크립트의 onload의 이벤트 헨들러와의 동작의미가 동일하다. => onload와 같은 시점에 동작되게끔 jQuery에서 제공하고 있는 메소드인 것이다.
//즉, 자바스크립트에서의 똑같은 환경에서 작업을 진행하도록 하는 것이다.

	$(document).ready(function(){
		alert('First Ready');
	});
	//ready()메소드는 또 다른 장점이 존재 
	//=> onload()는 하나만 등록할 수 있었다. 하지만 ready()메소드는 갯수에 제한없이 얼마든지 추가적으로 등록을 할 수 있다!! 
	//   (메소드다 보니까 여러 번 등록 가능_자바스크립트는 이벤트헨들러를 하나만 등록 가능)
	//하나만 등록하고 여러 개 등록할 수 있는것에 대해 어떤 장점을 얻어갈 수 있는지?
	//동적인 작업 코드는 script태그 안에서 하고, script태그는 갯수와 위치에 제한이 없다.
	//화면을 구성을 하다보면 중간 중간에 화면이 출력될 때 자바스크립트를 이용해서 body영역이 올라간 다음에 동작사항이 생길 수 있다.
	//한곳에 작성을 하다보면 동작에 대한 가독성이 떨어지기 때문에 동작사항이 발생되는 부분마다 추가를 하면서 가독성이 높은 코드를 작성할 수 있음.
	
	$(document).ready(function(){
		alert('Second Ready');
	});
	
	$(document).ready(function(){
		alert('Third Ready');
	});
	
	$(document).ready(function(){
		alert('Fourth Ready');
	});
	//화면상에 이벤트 출력 메시지가 화면보다 늦게 뜬다면 이벤트가 실행이 잘 안된 것인지 의문이 든다면?
	//기능은 소스코드를 다 읽어갔다는 것이지 화면상에 출력을 했다는 것이 아님. 
	//화면에 띄우는 동작은 또 다른 액션임 -> 화면을 띄우는 퍼포먼스 시간은 오래 걸림
*/ 	
	


/* 3. jQuery 기본 선택자 
      => 자바스크립트에서는 document객체를 통해서 getElementById를 통해서 접근했었음. 
      즉, 메소드를 활용해서 객체를 생성하여 접근했음 상당히 번거로움
      jQuery는 CSS처럼 대상에 접근할 수 있는 선택자의 개념을 거의 동일하게 제공해줌 
// - jQuery 메서드의 가장 기본적인 형태
//   . 문서 객체를 다룰 때 사용하는 형태
//   . jQuery에서 가장 많이 사용하는 형태

$(document).ready(function(){ //이벤트가 끝난 다음에(body영역을 다 읽혀진 후에) 선택자에 의한 코드를 구성하도록 하기 위해서 감싸주도록 함.
// 1) 전체 선택자(*)
	//jQuery라이브러리에서는 css메서드(모양을 꾸며주는 문법요소를 메서드로 정의한 것임)를 정의해서 제공을 해주고 있음 
	//                       => css메서드의 매개변수로 (속성, 속성에 대한 값)을 넣어주도록 한다.
	//$('*').css('color', 'red');
	//jQuery입력으로 전체선택자를 넣어주면서 css를 적용.
	//즉, 선택자를 입력으로 넣어주는 것이다.
	
// 2) 태그 선택자
	// - 한 개 태그 선택
	//$('h1').css('color', 'orange'); //선택된 h1이 오렌지의 색상이 적용됨
	
	// - 두 개 이상의 태그 선택
	//$('h1, p').css('color', 'orange');
	//jQuery의 입력으로 콤마를 이용해서 두 개이상의 태그를 선택할 수 있게끔 제공을 해주고 있다.

// 3) 아이디 선택자
	//$('#target').css('color', 'blue');
	//특정 태그의 아이디 고유 이름에 접근할 때는 #을 통해 아이디 이름을 적어주도록 한다. (css와 동일하게 적용)
	//=> 자바스크립트에서 사용했던 document객체를 선언하고 메서드를 통해 접근하여 기능을 적용하는 단계를 
	//   거치는게 아니라 jQuery는 다이렉트로 접근하여 기능을 접근할 수 있다.(코드가 매우 간결해짐)

// 4) 클래스 선택자 (가장 많이 활용이 되어지는 선택자임.)
	//$('.item').css('color','yellow');
	//클래스의 속성의 이름을 가진 태그에 접근하려면 css와 동일하게 .클래스에 지정한 이름으로 대상을 선택하도록 한다.
	
	//가독성 있게 접근하는 방법 -> h1태그에 class이름이 item이라고 붙어있음, h2, h3든 item이라는 이름이 붙어있을 수 있음
	//                             따라서 h1이라는 태그에 클래스 속성 이름 대상만을 선택하겠다는 명시적인 접근 방법을 적용하도록 한다.
	//*** 클래스 선택자를 사용할 때는 다른 선택자와 연결을 시켜서 대상을 구체화 시키면서 가독성을 높여감으로써 선택자를 지정하도록 한다.
	$('h1.item').css('color','yellow'); 
	
	//!!두 개이상의 이름이 붙어있는 클래스를 선택하기 위해서는 아래와 같이 지정하도록 한다!!
	$('.item.select').css('color','green');  
	//두 개의 이름이 붙어있는 대상을 선택을 할 때 주의) '.item .select' 중간에 여백이 발생하면 선택이 안되어질 수 있다!! (빈 스페이스가 생기지 않도록 주의)

});
*/

/* 4. jQuery 자식(손)선택자와 후손 선택자 (선택자의 기호가 css와 동일하게 사용됨) 
//$(document).ready(function)(){}); //워낙 많이 사용이 되다 보니 아래와 같은 약식 형태의 코드로도 제공을 해주고 있음
$(function(){ //바디영역이 다 읽혀져가야 선택을 하든 기능을 적용 하든 할 수 있음 그렇기 때문에 동적인 기능 구현 부분을 감싸주는 것임
//갯수에 제한이 없어서 활성화를 여러군데에 시켜놔도 됨. -> 이전 컨셉에 맞춰서 타이틀 번호 별로 ready()이벤트를 만들어서 실습을 진행할 예정
// - 자식(손) 선택자 (기호는 >)
	//$('body > *').css('color','red');
	// > * : 자식에 있는 모든 것들을 선택하겠다는 의미
	//body에 있는 모든 자식이기 때문에 모든 태그들이 선택되어지는 형태를 보이고 있음.
	
// - 후손 선택자 (기호는 공란_스페이스)
	$('body *').css('color','green'); //자식 선택자와 같은 결과로 모든 태그들이 선택되어지고 있음.
	
	//선택자에서의 기준을 시작태그와 끝나는태그로 잡아야 한다.
	//body를 기준으로 했을 때 자식은 div만 선택이 되어짐. -> div가 선택되어졌다는 것은 그 안에 있는 요소들도 영향을 끼친 것임
	//후손은 div, ul, li전부가 선택이 되어지는 것이다.
	//결과적으로는 다 선택이 되어져서 보여지고 있지만 어떤 태그가 선택이 되어졌는지 체크하는 것이 중요하다.
});	
*/


/* 5. jQuery 속성 선택자  
//- 기본 선택자 뒤에 붙여 함께 사용.
//- 입력 양식과 관련된 태그를 선택할 때 많이 사용.

$(function(){
	//태그의 이름과 함께 내가 원하는 타입의 대상을 선택해서 접근을 하도록 함.
	$('input[type=text]').val('Hello jQuery!!!');
	//jQuery 제공 기능 - val()메서드: 입력으로 메시지를 넣어주면 디폴트로 화면이 구성될 때 선택한 영역에 텍스트를 보여주도록 함.
});
*/

/* 6. jQuery 필터 선택자 
// 1) 입력 양식 필터 선택자
// .input:button
// .input:checkbox
// .input:radio
// .input:file
// .input:image
// .input:password
// .input:text
// .input:submit
// .input:reset

// .요소:checked  선택의 유무를 체크
// .요소:disabled 비활성화가 되어져 있는지 체크
// .요소:enabled  활성화 되어져 있는지 체크
// .요소:focus    현재 마우스의 커서로 포커스가 되어져 있는지 체크
// .요소:selected 현재 선택되어진 항목을 체크
// 주의) :(콜론)과 함께 사용이 되어짐


	$(function(){
		setTimeout(function(){ //자바스크립트에서 setinteval()메소드와 동일하게 동작함!! => 이처럼 setTimeout는 동일한 컨셉으로 jQuery에서 제공하는 함수이다.
			                   //차이점은 setinteval()은 지정한 시간마다 이벤트가 발생되어 호출되었지만 setTimeout()은 딱 한번만 이벤트가 발생이 된다.
			var value = $('select > option:selected').val(); //val(): 값을 넣어주면 디폴트로 출력해주고, 아무것도 넣어주지 않으면 그 항목의 내용(태그에 적용했던 내용)을 읽어와주게 된다.
			alert(value); 
		}, 5000); 		
	}); //내가 지금 선택한 항목이 5초가 지난 시점에 메시지로 출력되는 것을 확인 할 수 있다.
	
	
	
// 2) 위치 필터 선택자
//	 => 주의) 인덱스의 값(0부터 시작)으로 카운팅이 되어진다!! 
//   . 선택자를 사용해 문서 객체를 선택한 후에 다음과 같은 위치를 지정한다.
//    >> 요소:odd -> 홀수 번째에 위치한 문서 객체 선택.
//    >> 요소:even -> 짝수 번째에 위치한 문서 객체 선택.
//    >> 요소:first -> 첫번째에 위치한 문서 객체 선택.
//    >> 요소:last -> 마지막에 위치한 문서 객체 선택.
	
	$(function(){
		$('tr:odd').css('background', 'silver'); // 0부터 카운팅.
		//홀수번째에 위치한 tr이 선택되어짐 => 1,3,5...
		$('tr:even').css('background', '#9F9F9F');
		$('tr:first').css('background', '#000000').css('color', '#FFFFFF');//!!메서드 체이닝 방식으로 css()메서드를 추가할 수 있다!!
	});


// 3) 함수 필터 선택자
//   >> 요소:contains(문자열)
//       ->특정 문자열을 포함하는 문서 객체를 선택.
//   >> 요소:eq(n)
//       ->n번째에 위치하는 문서 객체를 선택.
//   >> 요소:gt(n)
//       ->n번째 초과하는 위치에 있는 문서 객체를 선택.
//   >> 요소:has(h1)
//       ->h1 태그를 가지고 있는 문서 객체를 선택.
//   >> 요소:lt(n)
//       ->n번째 미만에 위치하는 문서 객체를 선택.
//   >> 요소:not(선택자)
//       ->선택자와 일치하지 않는 문서 객체를 선택.
//   >> 요소:nth-child(3n+1) 
//       -> 3n+1번째에 위치하는 문서 객체를 선택(인덱스 1부터 카운팅).

	$(function(){
		$('tr:eq(0)').css('background', 'black').css('color','white');
		//입력으로 전달한 n번째 위치한 문서객체를 선택하도록 함 
		//=> 첫번째 요소를 선택(tr:first로 선택하는 것과 동일한 효과)
		$('tr:nth-child(3n+1)').css('background', 'green');
		//수열 의미 값을 넣어줌 -> 1, 1을 넣어주면 4, 2를 넣어주면 7 ...로 하여금 해당 항목을 선택되어진다.
		//1부터 카운팅이 되어지기 때문에 꼭 체크를 해두고 있어야 한다!!
		$('tr:nth-child(3n+2)').css('background', 'red');
		$('tr:nth-child(3n)').css('background', 'blue');
		//:nth-child() -> 여기서 들어가는 수열의 값은 선택하고자하는 대상을 적절하게 수식을 이용해서 구성을 해주면 된다.(대상의 규칙성만을 가진 연산식만 넣어주면 됨.)
	});
*/

// !!jQuery에서 제공하는 다양한 기능 - 배열의 자료형을 이용할 때 자주 사용하게 될 메서드!!
/* 7. jQuery를 사용한 배열 관리(1) 
// - each() 메서드 사용 - 배열 데이터 관리에 많이 활용됨
//    . 매개 변수로 입력한 함수 사용.
//    . for in 반복문처럼 객체나 배열의 요소 검사하는 메서드

// 화면상에 아무것도 없는 것으로 생각하고 실습
// - each() 메서드의 형태 // 배열 데이터를 효율적으로 처리할 수 있음
//	 1. $.each(object, function(index, item){});
//      object => 배열 데이터를 입력으로 전달받는다고 생각. (두 개이상의 데이터를 보관하고 있는 객체를 넣도록 함)
//      두번째 매개변수에는 함수를 전달함.

	$(function(){ //자바스크립트에서는 {}이 객체임 => key, value형태로 데이터를 관리 
		var array = [{name: 'Naver', link: 'https://www.naver.com'}, //3개의 객체 데이터를 보관하려고 하는 것임. => 바로 초기화하면서 저장하도록 함.
					 {name: 'Daum', link: 'https://www.daum.net'},
					 {name: 'Nate', link: 'https://www.nate.com'}]; 
					 //주의) 자바에서는 배열의 자료형은 연속적으로 메모리를 할당해서 두 개 이상의 데이터를 보관하고 하나의 이름으로 인덱스를 통해 배열메모리를 관리했었음
		             //      또한, 배열자료형은 동일한 자료형이여야 했음. 그러다 보니 반드시 동일한 자료형으로 선언을 하도록 하면서 엄격한 문법 양식을 가지고 있었다.
		             //      그러나 자바스크립트는 하나의 자료형이기 때문에 동일한 자료형일 필요가 없어졌음. 이 부분을 구분하면서 체크하도록 하자.
	
		
		             //자체적으로 데이터를 읽어오면서 그때마다 함수를 호출함.
		$.each(array, function(index, item){ //데이터를 꺼내와서 적용할 기능을 함수안에 넣어주도록 한다.
			var output = ''; 
		
			output += '<a href="' + item.link + '">'; // <a href="https://www.naver.com">
			//href의 내용을 item안에 link속성값으로 넣어주는데 큰따옴표로 감싸줘야함!!
			output += '<h1>' + item.name + '</h>'; // <a href="https://www.naver.com"><h1>Naver</h1>
			output += '</a>'; // <a href="https://www.naver.com"><h1>Naver</h1></a>
			
			document.body.innerHTML += output; //body영역에 현재 출력되고 있는 내용이 있다고 한다면 싹 다 지우고 output변수에 담긴 내용을 출력하도록 함
		}); 
		//이벤트나 함수의 동작 특성과 관련해서 이러한 코드구문들로 활용이 되어짐 (매개변수로 함수를 선언하도록 하는 코드형태)
		//동작원리: 여러 개의 데이터가 담겨있을 때 each는 첫번째 데이터를 꺼내온다. 두번째로 전달한 함수를 호출해주게 된다. 
		//          => index: 몇번째 데이터를 꺼내올지(0부터 시작) / item: 현재 데이터를 넣어줌(즉, 전달된 데이터)
		//          !!모든 데이터를 꺼내올 때까지 반복하면서 함수를 호출한다!!
		//          별도의 반복문을 작성할 필요가 없는 것임. 배열데이터를 처음부터 끝까지 읽어오면서 처리할 수 있도록 기능을 제공해주는 메소드인 것이다.
	});
*/

/* 8. jQuery를 사용한 배열 관리(2) 
//- 각 객체에 서로 다른 class 속성을 설정하고 싶을 때 each() 메서드 사용.
	// 예제1.
	$(function(){
		$('h1').addClass('high-light');  
		// addClass메서드 = h1태그들에 'high-light' 클래스를 추가해줌
		// 다양한 기능의 메서드 제공 => 다양한 동적 효과부여에 사용할 수 있음
	});

	 // 예제2.
	 // - each() 메서드의 형태
	 //   2. $(selector).each(function(index, item){})); = 이미 each 메서드의 선택 대상이 지정되어 있음. 선택된 대상에 대하여 바로 함수 등록
	 $(function(){
		$('h1').each(function(index, item){
			// $(item).addClass('high-light-'+ index); // 첫 h1 -> 0, 두번째 -> 1 .... h1마다 클래스의 이름을 개별적으로 부여
			$(this).addClass('high-light-'+ index); // item = 선택된 자신 = this (내가 선택한 대상 => this키워드를 활용)
		});	 
	 });

	// 예제3. addClass() 메서드의 매개변수에 함수 전달도 가능
	$(function(){ //addClass()메소드는 index를 전달받게 되어져 있음
		$('h1').addClass(function(index){ // addClass메서드를 호출하면서 원하는 클래스 값을 리턴하도록 설정 (each문 사용할 필요없이)
			return 'high-light-'+ index; //  addClass에 함수를 전달해서 예제2에 적용했던 부분을 구현한다면 동일한 결과를 얻어낼 수 있음
		});
	});
*/

/* 9. jQuery를 사용한 객체 확장 
// 객체에서 속성이나 메서드를 나중에 추가하고 싶다고 하면 .을 통해 연결지으면 됐음 => 이 기능을 활용해도 됨.
	
	$(function(){
		// - 자바스크립트에서의 객체 속성 추가
		var object = {};
		
		object.name = '홍길동'; //자바스크립트에서 속성을 추가하는 방법 => .을 통해 추가할 속성 이름에 =을 통해 값을 넣어주면 됐음 (간단하게 확장하면 됐음.)
		object.gender = '남자';
		object.part = '영업';
		
		// - jQuery에서의 객체 속성 추가
		//	 . extend() 메소드	
		var jqueryObject = { name:'홍길동' };
		
		$.extend(jqueryObject, {
			gender:'남자',
			part:'영업'
		});
		//extend()메소드: 첫번째 매개변수는 속성을 추가하고자 하는 대상을 지정, 
		//                두번째 매개변수는 객체를 지정하여 추가할 속성에 key와 value값을 지정해주도록 한다.
		
		//어떻게 적용하느냐는 프로그래머의 몫이기 때문에 위에서 편한 방법으로 객체를 확장하도록 하면 된다. (자바스크립트, jQuery 추가 방법들 중 선택하여 사용)
		
		var output = '';
		
		$.each(object, function(index, item){
			output += index + ' : ' + item + '\n';
		});
		
		alert(output);
		
		var output = ''; //계속 output으로 누적이 되어지다 보니까 이전에 객체의 값도 같이 보이고 있음. 따라서 초기화하는 코드 추가.
		$.each(jqueryObject, function(index, item){
			output += index + ' : ' + item + '\n'; 
		});
		
		alert(output);
		
	});
*/

/* 10. jQuery 라이브러리 충돌 방지 */
// - 라이브러리(확장되어지는 추세임)는 jQuery만 존재하는 것이 아님. => 경우에 따라 라이브러리를 동시에 사용하게 될 수 있음 
// - jQuery외 prototype 자바스크립트 라이브러리도 동일하게 $를 식별자로 사용. 
//   => prototype: jQuery와 마찬가지로 함수를 정의할 때 $라는 기호를 등록해서 함수의 이름을 사용하고 있음.
// - 따라서 두 라이브러리를 함께 사용시 충돌 현상이 발생. => 어떻게 조치를 취할 수 있을까(jQuery 라이브러리 입장에서의 수정 방법을 살펴볼 예정)

	// 더 이상 식별자 $를 사용할 수 없다.
	$.noConflict(); //noConflict()메소드를 호출해주면 더 이상 $를 jQuery로 인식하지 않는다.
	//그렇게 되면 jQuery는 full name을 통해 사용하도록 해야 한다.
	
	//내가 내 파일 안에서 변수를 통해 이름을 등록을 해주면 
	//설정한 변수 이하에서는 jQuery대신에 내가 설정한 변수(J)를 사용할 수 있다!!
	var J = jQuery;
	
	J(document).ready(function(){
		J('h1').addClass('high-light');
	});


</script>
</head>
<body>
<!-- 3-1/3-2. 전체/태그 선택자
	<h1>Lorem ipsum</h1>
	<p>Lorem ipsum dolor sit amet.</p>
	<h1>Lorem ipsum</h1>
	<p>Lorem ipsum dolor sit amet.</p>
	<hr>
 -->
<!-- 3-3. 아이디 선택자 
	<h1>Header-0</h1>
    <h1 id="target">Header-1</h1>
    <h1>Header-2</h1>
    <hr>
-->

<!-- 3-4. 클래스 선택자 
    <h1 class="item">Header-0</h1>
    <h1 class="item select">Header-1</h1>
    <h1 class="item">Header-2</h1>
    <hr>
--> 
 
<!-- 4. 자식(손) 선택자와 후손 선택자 
	<div>--> <!-- body자식인 div의 영향을 받는 모든 것에 적용 
		<ul>
			<li>Apple</li>
			<li>Bag</li>
			<li>Cat</li>
			<li>Dog</li>
		</ul>
	</div>
    <hr>
-->

<!-- 5. 속성 선택자: 입력양식태그의 속성에 접근하는 선택자임 
    <input type="text"/></br>
    <input type="password"/></br>
    <input type="radio"/></br>
    <input type="checkbox"/></br>
    <input type="file"/></br>
    <hr>
-->

<!-- 6-1. 입력 양식 필터 선택자: 주로 단말기에서 유용하게 사용됨. 
	<select>
		<option>Apple</option>
		<option>Bag</option>
		<option>Cat</option>
		<option>Dog</option>
	</select>
    <hr>
-->

<!-- 6-2/6-3. 필터선택자 
	<table border="1">
		<tr><th>이름</th><th>혈액형</th><th>지역</th></tr>
		<tr><td>홍길동</td><td>AB형</td><td>서울시 강남구</td></tr>
		<tr><td>홍길서</td><td>A형</td><td>서울시 마포구</td></tr>
		<tr><td>홍길남</td><td>B형</td><td>서울시 서초구</td></tr>
		<tr><td>홍길북</td><td>O형</td><td>서울시 송파구</td></tr>
		<tr><td>김길동</td><td>O형</td><td>서울시 영등포구</td></tr>
		<tr><td>이길동</td><td>A형</td><td>서울시 강서구</td></tr>
		<tr><td>박길동</td><td>B형</td><td>서울시 용산구</td></tr>
	</table>
	<hr>
-->

<!-- 8. jQuery를 사용한 배열 관리(2) -->
	<h1>item - 0</h1>
	<h1>item - 1</h1>
	<h1>item - 2</h1>
	<h1>item - 3</h1>
	<h1>item - 4</h1>

</body>
</html>