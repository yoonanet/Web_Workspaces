<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Events</title>

<style type="text/css">
/* 1-2) / 2. 이벤트 연결 */
    .reverse {background:Black; color:White;} 
	/* 선택자를 이미 등록을 해놔서 없었던 이벤트에 의해 클래스 속성이 생겼을 때 css가 적용되도록 동적효과를 부과함.
	   => css문법적 효과에 jQuery 이벤트를 연결하게 된다면 동적인 효과를 부과해줄 수 있게 된다.(일반적으로 가장 많이 사용됨)  */
	
/* 4.매개변수 Context */
    * { margin:0px; padding:0px }

    div {
        margin:5px; padding:3px;
        border:3px solid black;
        border-radius:10px;
    }

/* 8. 마우스 이벤트 */
    .outer { 
    	width:200px; height:200px; 
    	background:Orange; padding:50px; 
    	margin:10px;
    }
    .inner { 
    	width:100%; height:100%; 
    	background:Pink; 
    }

</style>

<script src="./js/jquery-3.6.3.js"></script>
<script type="text/javascript">

/* 1. 이벤트 연결1 
//    => 필드의 이름이 on으로 시작되어진다면 거의 대부분이 이벤트와 관련하여 처리가 되어진다.
// - on() : 이벤트와 관련된 처리를 해주는 메소드이며, 이벤트를 연결해주는 기능을 제공한다.
// - 사용 형태

$(function(){
//    1) $(selector).on(eventName, function(event){ }); -> 함수전달(한 개의 이벤트만 등록할 수 있음)
	// 이벤트 연결	
	$('h1').on('click', function(event){
		$(this).html(function(index, html){ //html(): 태그를 태그로 인식하여 추가해주는 메소드
			//this => 지금 선택된 h1(대상), 클릭된 h1임
			return html += '+'; //전달된 텍스트에 +기호를 붙이도록 함.
		});		
	}); //영역이 클릭될 때마다 현재 문구에 +기호를 추가하게끔 기능을 연결시킨 것임!! 
	
	//1. 이벤트 연결 대상부터 지정 => 3개의 h1을 선택
	//2. on()메서드를 활용해서 이벤트를 연결해주도록 한다.
	//   첫번째 매개변수에 이벤트 이름을 넣어주고, 두번째 매개변수에는 함수를 전달한다.
	//jQuery가 두 번째로 등록한 함수 정보를 가지고 있다가 h1이 클릭이 될 때마다 함수를 호출한다.
	//즉, 두 번째 매개변수에 함수를 등록해두면 jQuery라이브러리가 정보를 가지고 있다가 호출을 해주게 되는 것이다.
	//   이처럼 라이브러리나 운영체제가 호출해주게 하는 함수를 콜백 함수라고 불러주고 있다. 
	//   (우리가 호출할 목적이 아닌 jQuery라이브러리나 운영체제가 호출할 목적인 함수를 말함)
	//이벤트에 대한 동작은 운영체제가 제일 먼저 인식함 -> 어느 위치에서 클릭이 되어졌는지 보고 브라우저에서 인식이 된다면 브라우저에게 알려줌.
	//그렇게 돼서 그 브라우저인 jQuery가 클릭된 정보를 전달을 받은 것이다!! (이때, 프로그래머 입장에서는 마우스가 눌린지 실시간적으로는 파악하지 못함!)
	//jQuery에게 클릭이 되었다는 것을 프로그래머인 우리가 알 수 있는 것은 jQuery에 의해서 클릭이 되면 등록함수를 호출이 되도록 하는 동작을 보고 확인할 수 있음
	
	//콜백: 백그라운드에서 호출을 해주는 것임 -> 여기서 백그라운드는 jQuery가 됨. 
	//자바에서는 대표적인 콜백함수가 쓰레드에 run()임 직접적으로 run메소드를 호출하는 것이 아닌 start()함수를 통해 실행시키도록 했었음
	//거의 대부분에 이벤트 관련 처리는 우리 개발자가 알 수 없고, 지금 연동해서 사용하는 자바라던지 jQuery라던지 자바스크립트가 운영체제로부터 정보를 전달받기 때문에
	//그때 호출한 함수를 개발자가 등록해두면 이 함수를 호출하면서 우리와 jQuery가 소통을 하게 되는 것이다.

	
//    2) $(selector).on(object); -> 객체전달(객체를 활용하면 두 개이상의 이벤트를 연결하여 사용을 할 수 있음)
	
	$('h1').on({ //이벤트가 실행됐을 때 콜백함수가 호출되도록 기능을 정의해보고자 함.
		
		//객체에 정의되는 함수는 메소드라고 함.
		mouseenter:function(){ //mouseenter: 마우스가 해당영역에 들어간 순간에 발생하는 이벤트임
			$(this).addClass('reverse'); //reverse 클래스 속성 추가
		}, //마우스의 해당영역으로 들어갔을 때 클래스 속성이 자동으로 추가됨.
		
		mouseleave:function(){ //mouseleave: 마우스가 해당영역을 벗어나는 순간에 발생하는 이벤트임
			$(this).removeClass('reverse'); //reverse 클래스 속성 삭제
		}
	}); 		
});
*/

/* 2. 이벤트 연결2 [ 이벤트 발생시에 동작의 변화를 체크하는 것이 중요함 ]
// - hover():mouseenter 이벤트와 mouseleave 이벤트를 동시에 연결. (즉, 두 개의 이벤트를 한 번에 처리할 수 있는 방법임)
// - $(selector).hover(function(event){}, function(event){}); => 두 개의 메서드를 매개변수에 콜백함수로 등록을 해주도록 한다.
//   => 마우스가 해당영역에 들어오는 순간 첫번째 매개변수에 등록된 콜백함수가 호출되고, 
//      마우스가 벗어나게 되면 두번째 매개변수에 등록된 콜백함수를 호출하게 된다.
	
	//ready()함수도 콜백함수이다. jQuery나 자바스크립트가 body영역을 다 읽어갔는지를 체크하는 것이다.
	$(function(){
		$('h1').hover(function(){
			$(this).addClass('reverse');
		}, function(){
			$(this).removeClass('reverse');
		});
	});
*/

/* 3. 이벤트 제거 
// - off() -> one()
	
	$(function(){
		// 이벤트 연결 
		// => 이전에는 on()메소드를 통해서 이벤트를 연결했었지만 
		//    아예 click()메서드로 클릭이벤트를 다이렉트로 연결하여 사용할 수도 있음!! 
		$('h1').click(function(){ //h1(대상)이 마우스로 클릭이 되면 입력으로 전달된 콜백함수를 호출하게끔 메서드가 정의되어져 있음
			$(this).html('CLICK'); //대상이 클릭될 때마다 등록한 메시지가 변경되도록 함.
			
			//이벤트 제거 -> off()메서드를 적용!!
			//최초 한번만 메시지를 출력해주고 이벤트를 제거하고자 한다면 아래와 같이 코드를 작성해주도록 한다.
			$(this).off(); //off메서드를 현재 대상에 적용하면 현재 선택된 h1의 이벤트를 발생시키지 않게 된다.
		});		
	});
*/

/* 4. 매개변수 context => 태그 선택자를 이용해서 이벤트를 연결했는데 지금 선택한 바운더리 안에서만 그 이벤트관련 정보를 캐치하고 싶다고 할 때 활용되는 코드임.
// - $(selector, context) => jQuery함수를 호출할 때 선택자 뿐만 아니라 ,콤마를 이용해서 선택자의 범위를 한정시키도록 하는 매개변수도 전달할 수 있음
//   . context:selector가 적용하는 범위를 한정.
//   . 특정 부분의 선택자를 선택하고 싶을 때 사용하는 매개변수.
	
	$(function(){
		$('div').click(function(){ //click이벤트부터 연결!! (div영역에서 클릭을 하게 되었을 때 클릭이벤트를 연결하도록 함.)
		//=> this를 빼게 된다면 모두 다 div영역이기 때문에 3개의 영역이 전부 클릭이 된 것처럼 메시지를 보이고 있음!!
			var header = $('h1', this).text(); //text메서드에 입력 값을 넣지 않았기 때문에 대상의 텍스트 노드를 반환해줌 
			//첫번째 매개변수로 h1이라는 대상 전달, 두번째 매개변수로 내 자신의 문서객체를 입력으로 전달함
			var paragraph = $('p', this).text();
			//!!this라는 값을 넣게 되면 내가 지금 클릭한 범위로만 한정을 지어주는 것이다!!
			
			alert(header + ' : ' + paragraph);
		});
	});
*/

/* 5. 이벤트 강제 발생 (자동으로 이벤트가 발생되어지는 효과) 
//자바스크립트에서는 이벤트의 필드이름으로 등록되어있는 onclick()에서 함수호출하면 됐음 => 이벤트마다 이름을 지정하여 알아야 했음
//하지만 jQuery는 공통된 메서드의 이름으로 발생시키고 싶은 이벤트를 입력으로 전달받게끔 구현하여 제공을 해주고 있는 것이다!!
// - 사용 형태
//   1) $(selector).trigger(eventName); 
	
	$(function(){
		                    //인덱스 번호, 전달된 텍스트 노드
		$('h1').click(function(index, html){//h1이 click됐을 때 실행하고 싶은 기능을 넣어주도록 한다.
			
			$(this).html(function(index, html){ //현재 대상에서 html메서드를 이용하여 html을 전달받아야 내용을 읽어오게 될 것이다.
				return html + '*'; //클릭됐을 때 *를 추가하게끔 한다.
			}); 
			
		});  
		
		//클릭을 하지 않더라도 강제로 이벤트를 발생하고자 한다면 아래와 같은 코드를 작성하도록 한다.
		setInterval(function(){
			//강제 이벤트 효과 방법1
			//$('h1').last().trigger('click'); 
			//마지막 h1을 선택 -> trigger메서드를 이용해서 입력으로 전달되어진 이벤트를 강제로 발생시키는 기능을 부여함
			//즉, 강제로 클릭이벤트가 발생되어지는 효과를 trigger메서드를 활용해서 등록한 것임.
			
			//강제 이벤트 효과 방법2
			$('h1').last().click(); //다이렉트로 click메서드를 호출을 해주면서 위 코드와 동일한 효과를 가져가도록 한다.
		}, 1000); //콜백함수를 등록해두면 2초마다 등록된 함수를 수행해줌   
		
	});
	

//   2) $(selector).trigger(eventName, data);
	
	$(function(){
		$('h1').click(function(event, data1, data2){ //trigger에서 작성했던 데이터를 전달받을 수 있는 데이터들을 매개변수로 지정하도록 한다.
			alert(data1 + ' : ' + data2);
		});
		
		// 강제로 이벤트 발생 -> trigger의 매개변수에 작성한 데이터를 첫번째 매개변수로 지정한 이벤트의 콜백함수로 전달하도록 함.
		//h1이 하나밖에 없어서 선택이 되어지긴 할테지만 jQuery에서 제공해주고 있는 eq(선택 인덱스번호)메서드를 활용하여 접근하도록 한다.
		$('h1').eq(0).trigger('click', [345, 75]); 
		//trigger(): 첫번째 매개변수로 처리할 이벤트를 넣어주도록 한다. 두번째 매개변수로 데이터를 넣어주면서 전송해주도록 한다.
		//           => 두번째 매개변수로 데이터를 전달하면 콜백함수에서 trigger에서 작성했던 데이터를 전달받아서 처리를 해줄 수 있다!!
		
		
		//데이터 전달을 목적으로 클라이언트 모르게 자체적으로 콜백함수를 호출하면서 데이터를 전달해서 
		//전달받은 데이터를 가지고 동작을 처리하고 싶은 기능이 있을 때 위와 같은 방법을 활용하여 처리하도록 한다.
		
	});
*/


/* 6. 기본 이벤트 제거  
//기본적으로 태그에 장착되어져 있는 이벤트들이 적용되어진 요소들이 있음 
//=> 입력양식태그에서 타입을 summit을 선택하면 form태그에서 action 속성으로 설정한 값을 통해 서버에 값이 보내지고, 
//   타입에 reset같은 경우 값을 전부 초기화 하는 기본적인 이벤트를 가지고 있음
//   a태그 같은 경우에서도 웹페이지에 이동할 수 있는 이벤트들이 내부에 탑제되어져 있었음.
//이렇듯, 기본적으로 이벤트가 적용되어져 있는 태그의 이벤트를 제거하고자 하는 것이다. 

	$(function(){
		$('a').click(function(event){ //클릭됐을 때의 이벤트 정보를 매개변수로 넣어줌
			var e = event || window.event; //익스플로러 8버전 이하에서는 window객체에 event필드에 이벤트에 관련된 정보가 저장되어져 있음
			//호환성 있게 이벤트가 동작이 되기 위해서 짧은 조건문을 활용하도록 한다. (모든 브라우저들이 적용될 수 있도록 함. - 익스플로러 8이하버전도 적용됨)
			
			$(this).css('background-color', 'blue');
			
			//상위 부모에게도 이벤트가 전달되게끔 브라우저가 동작됨.
			//따라서 상위부모에게 이벤트가 전달되지 않도록 아래의 코드 작성
			e.cancelBubble = true; //인터넷익스플로러 8이하버전에서 제거하는 코드임
			if(e.stopPropagation) {  //다른 브라우저에서는 stopPropagation의 메서드 존재여부를 체크해서 
				e.stopPropagation(); //이벤트 전달 기능을 제거하도록 함!!
			}
			
			//***preventDefault(): 태그의 기본 이벤트를 제거하는 메소드
			e.preventDefault(); // (a 태그의) 기본 이벤트 제거.
			
			$('h1').click(function(){ //h1에 클릭이벤트를 연결하여 클릭이 되어진 순간 배경색상을 빨간색으로 적용함.
				$(this).css('background-color', 'red');
			}); 
			//결과: 원래는 해당 페이지로 이동해갔지만 클릭을 해도 더이상 페이지로 이동하지 않음 
			//      -> 위 코드로 페이지로 이동하는 기본 이벤트를 무력화를 시켰기 때문이다.
			
		});
	});
*/	

/* 7. 이벤트 통합 메서드 
// - on() :이벤트를 연결.
// - off():이벤트를 제거.
	$(function(){
		$('div').on('click', function(){
			//지금 선택되어진 div를 body의 자식으로 뒤에 복제하도록 함.
			$(this).clone().appendTo('body');
		}); //!!클릭을 할 때마다 복제가 되어지는데, 이벤트까지는 같이 전달이 되어지지 않는다!!
	});
*/


/* 8. 마우스 이벤트 -> 세분화하여 기능을 만들고자 할 때 아래와 같은 기능들을 활용하도록 한다.
// -click      : 마우스 클릭할 때 이벤트 발생.
// -dbcllick   : 마우스 더블클릭할 때 이벤트 발생.
// -mousedown  : 마우스 버튼을 누를 때 이벤트 발생.
// -mouseup    : 마우스 버튼을 뗄 때 이벤트 발생.
// -mouseenter : 마우스가 요소의 경계 외부에서 내부로 이동할 때 발생. 
// -mouseleave : 마우스가 요소의 경계 내부에서 외부로 이동할 때 발생.
// -mousemove  : 마우스를 움직일 때 발생. 
// -mouseout   : 마우스가 요소를 벗어날 때 발생.
// -mouseover  : 마우스가 요소 안에 들어올 때 발생.
	
	$(function(){
		//메서드체이닝 방식을 이용해서 .연산자를 통해 여러 이벤트들을 연결하여 적용(호출)할 수 있도록 한다.
		//시각적으로 이벤트 발생을 체감할 수 있도록 어떤 메서드가 호출됐는지 메시지로 적어주도록 한다.
		$('.outer').mouseover(function(){ //각각의 이벤트마다 콜백함수를 정의해주도록 함.
			$('body').append('<h2>over</h2>'); //body의 맨 마지막단에 h2태그를 연결하도록 함.	
			//각각의 앨리먼트를 구분지어서 영역사이로 들어올 때 무조건적으로 이벤트가 발생이 됨.
		}).mouseenter(function(){
			$('body').append('<h2>enter</h2>');
			//경계영역의 개념으로 외부 -> 내부로 들어올 때 발생
		}).mouseleave(function(){
			$('body').append('<h2>leave</h2>');
			//경계영역의 개념으로 내부 -> 외부로 들어올 때 발생
		});
		//!!mouseover와 mouseenter의 차이점을 구별하도록 한다!!
		//mouseenter: 경계의 개념으로 외부에서 내부로 들어올 때 발생(한번 영역에 들어오면 더 이상 이벤트가 발생이 되어지지 않음), 
		//mouseover: 각각의 앨리먼트를 구분지음, 앨리먼트마다 외부에서 내부로 들어올 때 이벤트가 발생
		//mouseleave: 경계의 개념으로 영역 밖으로 나가게 되면 이벤트가 발생됨
	});
 */	


/* 9. 키보드 이벤트 
// -keydown  : 키보드가 눌러질 때 발생. (키보드를 누르는 순간!!)
// -keypress : 글자가 입력될 때 발생(한글지원x).
// -keyup    : 키보드가 떼어질 때 발생. (키보드를 눌렀다가 떼는 순간!!)

	$(function(){
		$('textarea').keyup(function(){ //키보드를 눌렀다가 떼는 순간에 동작을 지정해주고 싶다면 콜백함수를 활용하도록 한다.
			//textarea태그가 대상이기 때문에 키보드로 부터 데이터를 입력할 때, 
			//                               글자마다 카운팅을 해주고 150글자 이전까지만 입력되도록 하는 인폼을 제공되도록 기능 구현
			//남은 글자수를 구합니다.
			var inputLength = $(this).val().length;
			//val()메소드를 활용해서 현재 textarea에 입력한 값을 가져오도록 한다. => 그 가져온 텍스트를 length필드를 통해 갯수를 가지고 와서 변수에 담도록 함
			//=> 한글을 입력할 때는 한글자가 완성되기 전까지는 length값이 증가되지 않음 (!!길이 값을 유지시켜줌!!)
			//   즉, length필드는 모든 나라의 글자에 한글자가 완성되기 전까지는 길이 값을 유지시켜줄 수 있도록 기능이 적용될 수 있게끔 처리가 되어진다.
			var remain = 150 - inputLength; //입력할 수 있는 남은 텍스트의 갯수에 대한 정보를 알려주도록 함!!
			
			$('h1').html(remain); //현재 텍스트노드의 값을 넣어주도록 한다.
			
			if(remain >= 0){
				$('h1').css('color', 'black');
			} else { //150값을 넘어가면 음수값이 출력됨 
				$('h1').css('color', 'red'); //그때 입력값이 초과됐다는 인폼을 시각적으로 나타내주도록 한다.
			}
		});
	});
*/



</script>
</head>

<body>

<!-- 1/2/3. 이벤트 연결/제거
    <h1>Header-0</h1>
    <h1>Header-1</h1>         
    <h1>Header-2</h1>
 -->

<!-- 4. 매개변수 context
    <div>
        <h1>Header1</h1>
        <p>Paragraph1</p>
    </div>
    <div>
        <h1>Header2</h1>
        <p>Paragraph2</p>
    </div>
    <div>
        <h1>Header3</h1>
        <p>Paragraph3</p>
    </div>
 -->

<!-- 5-1). 이벤트 강제 발생
    <h1>Start: </h1>
    <h1>Start: </h1>
-->

<!-- 5-2). 이벤트 강제 발생 
    <h1>TRIGGER</h1>
 -->

<!-- 6. 기본 이벤트 제거
    <h1>
        <a href="https://www.naver.com">네이버</a>
    </h1>
 -->

<!-- 7. 이벤트 통합 메서드
    <div>
        <h1>$(selector).on()</h1>
        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</p>
    </div>
 -->

<!-- 8. 마우스 이벤트 
    <div class="outer">
        <div class="inner"></div>
    </div>
 -->

<!-- 9. 키보드 이벤트 -->
    <div>
        <p>지금 내 생각을</p>
        <h1>150</h1>
        <textarea cols="70" rows="5"></textarea> <!-- 여러 라인의 텍스트를 입력받을 수 있는 태그 -->
    </div>


</body>
</html>