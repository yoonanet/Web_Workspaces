<!--
자바스크립트에서는 브라우저를 관리하는 window 객체가 있고,
window 객체 안에 screen, location, navigator, history의 객체들이 제공되고 있었다.
거기에 추가적으로 Document객체가 있다. => 관리하는 주체가 무엇인지를 살펴볼 예정이다.
	
	html을 통해 뼈대를 만들고 그 뼈대를 꾸며주기 위해서 css를 이용한다.
	꾸며줄 대상에 접근하기 위해서 선택자를 활용했다. 그 선택자를 활용해서 스타일들을 적용했었다.
	자바스크립트는 그 뼈대를 대상으로 동적효과를 부여하고 싶은 것이다. (가장 기본적)
	동적효과를 부여하고 싶은 대상을 어떻게 접근할 수 있는지 방법을 알아야 한다.
	또한, 동적효과를 부여할 때 처음에 보여진 화면상에 뭔가의 이벤트가 발생이 됐을 때 
	      그 순간 특정 메시지를 출력하게 한다던지, 특정 태그들을 출력한다던지 하는 이러한 동작들이다.
	그러한 동적 처리를 하도록 하는 주체가 DOM(실질적인 동적효과를 부여하는데 있어서 핵심기능이 됨)인 것이다.
	
	* 문서객체모델(DOM, Document Object Model)
	  - 넓은 의미:웹브라우저가 HTML 페이지를 인식하는 방식.
	  - 좁은 의미:document 객체와 관련된 객체의 집합.
	  - 이미 만들어진 HTML 페이지에 태그를 추가, 수정, 제거할 수 있음. => 이미 완성된 정적인 화면에서 특정 태그를 추가, 수정, 제거되기 때문에 동적효과가 부여되는 것이다.
	  - 기본적인 자바스크립트만으로 DOM을 다루기에는 너무 복잡하므로, 간단한 내용만 살펴보고 자세한 내용은 jQuery와 함께..
	   => 기본적으로 많이 활용되는 동적인 기능들을 jQuery라는 라이브러리 형태로 제공(함수나 메서드의 형태로)을 해주고 있다. 
	      따라서 자바스크립트를 이용할 때는 jQuery를 사용하는 것이다!!

	* DOM 관련 용어
	  - 문서 객체:html or body 태그를 자바스크립트에서 이용할 수 있는 객체로 만들면 그것이 문서 객체.
	  - 노드: 각 요소(head, body, title, script, h1, HEADER ...) => document에서는 html의 앨리먼트를 노드라고 불러준다.
		. 요소노드(Element Node):HTML 태그. => 이미지 자체는 단일태그로 시작과 끝태그에 아무것도 필요하지 않기 때문에 요소노드라고 불림
		. 텍스트노드(Text Node) : 요소노드 안에 들어 있는 글자.
	  - 정적으로 문서 객체를 생성한다의 의미
		: 웹페이지가 처음 HTML 페이지에 적혀있는 태그들을 읽으며 생성하는 것.
	  - 동적으로 문서 객체를 생성한다의 의미
		: 자바스크립트를 사용해 원래 HTML 페이지에는 없는 문서 객체를 생성하는 것.
		
자바스크립트에서는 DOM의 원리와 개념의 설명 위주로 살펴볼 예정이다. -->

<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>문서객체모델</title>
<script type="text/javascript">
window.onload = function(){ //body영역을 다 읽어갔을 때 이벤트를 발생시키면서 함수가 호출되는 형식이다. -> 따라서 onload이벤트를 실습 영역 전체로 감싸주도록 한다.
	                        //body영역이 다 실행이 된 이후에 코드들을 실행하도록 한다.
/* 1. 용어 정의 
//script에서 동적 기능을 적용해주기 위해서는 해당 태그 영역에 접근할 수 있어야 한다.
//css는 스타일시트에 선택자로 하여금 해당 영역에 접근할 수 있었다. 
//이 스타일시트의 수행시점은 헤더 영역에 있다고 하더라도 바디영역에 내용들을 읽어오면서 
//브라우저가 화면상에 출력할 때는 바디영역에 해당되어지는 요소들이 있으면 그 요소들을 보면서 스타일에 접근함!!

//자바스크립트에서는 동적효과를 부여하고자 한다면 동적효과를 부여하기 위해서 대상요소에 접근을 하기 위해서는 대상이 먼저 존재하고 있어야 한다.
//즉, 바디영역에 접근 대상이 존재하고 있어야 영역에 접근할 수 있음. => 이때 document객체를 이용해서 해당 태그 영역에 접근하도록 한다.
	var header = document.getElementById('header_1'); //document객체가 getElementById 입력으로 전달한 엘리먼트 요소를 선택해주게 된다.
	//document는 메소드를 통해서 내부에 메모리를 할당하여 자신이 원하는 정보를 저장해놓게 된다. => 그 시작 주소값을 리턴하게 된다 -> 참조변수를 선언하여 저장
	//객체가 반환된다고 보면 됨. => 클래스라고 보고 필요한 정보를 가지고 있다가 시작주소값을 반환해서 변수에 담아주는 것으로 생각.
	//이렇듯 접근할 수 있는 객체가 Document Object(html에 접근할 수 있는 주체,객체)라고 불러주는 것이다.
	
	//header_1에 텍스트가 HEADER-1로 메시지를 출력하고 있다. 이 메시지를 바꿔주고 싶다고 한다면
	//header객체 안에 innerHTML속성을 제공해주고 있음. => 데이터를 이 속성에 넣어주면 현재에 출력되어지고 있는 메시지를 수정(업데이트)해준다.
	header.innerHTML = 'Hello JavaScript!'; //지정한 메시지를 실시간적으로 출력을 해주는 것이다. -> 실행을 하면 전혀 변화가 없고 에러가 나고 있다.
	//왜 에러가 나고 있는가? 스크립트를 이 안에 작성을 한다면 크롬 브라우저는 위에서 부터 아래로 내용들을 읽어간다. 
	//                       -> 이때 이 코드를 만나면 html코드를 만나지 않았기 때문에 존재하지 않은 코드로 인식한다. 즉 위에 반환된 값이 null이 됨.
	//                       -> 제대로 동작이 되려면 body부터 읽어가서 브라우저가 body의 내용을 알고 있을 때 위에 코드가 실행이 되어져야 한다. -> 이때, 이벤트처리가 필요한 것이다. onload메소드로 감싸기
	//즉, 객체에 있는 innerHTML가 동적인 수정을 한 것이다!! ex) 체크되는 순간에 업데이트되도록 하는 코드.
*/	
	
/* 2. 문서 객체 생성1: 동적으로 태그를 추가하는 방법 
	// 1. 문서 객체 생성 => 현재 body에서 h1태그 뒤에 h2태그를 추가하려고 함.
	//    태그는 html에서 사용하는 용어이다. 자바스크립트에서는 문서객체라는 용어를 사용한다.
	var header = document.createElement('h2'); //h2(제목의 성격을 부여함)태그의 특징은 텍스트가 꼭 있어야 한다. => 이러한 document를 텍스트노드라고 불러준다.
	//createElement()메소드의 추가하고 싶은 태그의 정보를 입력으로 넣어주도록 한다. 
	//메소드 안에서는 태그를 생성하기 위한 정보나 필요한 내용들을 자체적으로 메모리를 할당해서 보관을 해둔다. -> 이후 시작 주소값을 반환해준다.(추가에 관련된 객체를 반환해주는 것이다.)
	
	//createTextNode: 텍스트노드를 처리하기 위한 메서드, 입력으로 출력하고 싶은 텍스트를 넣어줌
	var textNode = document.createTextNode('Hello DOM'); // => 객체를 반환받음으로써 그 안에 있는 메서드나 필드를 사용할 수 있도록 한다.
	//이러한 동작원리가 메서드 안에 클래스를 정의하는 것과 같은 개념이다. 
	//메서드 안에 정의를 하다보니까 외부에서는 접근할 수 없었음. 그렇기 때문에 인터페이스로 정의를 해주고 있었음 => 이와 같은 개념이 여기서 똑같이 적용됨.
	
	//문제는 위 두 소스가 하나가 되어야 한다. document객체와 textnode를 연결해줘야 하는 것임.
	
	// 2. 노드(요소/텍스트)를 연결.
	//createElement인터페이스를 통한 appendChild()메소드를 호출하도록 한다. => 이 메소드를 통해서 정보를 연결시키도록 한다.
	header.appendChild(textNode); // 자식을 연결하겠다는 것이다. -> 텍스트 노드를 자식으로 연결하면 된다.
	
	//위에 하나가 된 것을 화면상에 추가를 해주면 된다.
	//3. body 문서 객체에 header 문서 객체를 추가.
	//   body는 기본틀로 항상 존재하는 태그이기 때문에 바로 접근할 수 있게끔 필드의 형태로 정의를 해서 제공을 해주고 있는 것이다.
	//   body는 필수라서 필드로 정의를 해두고 있기 때문에 용어 정의에서의 방법처럼 접근할 필요가 없다.
	document.body.appendChild(header); //연결을 할 때는 appendChild의 형식으로 추가를 해주도록 한다.
	//!!기존 body영역에 있는 모든 영역에 마지막에다가 추가를 해주게 된다!! 
	//위와 같은 방법이 동적으로 태그를 추가하는 방법이 되는 것이다.
	//나중에 display속성을 통해서 나타났다 사라졌다하면서 텍스트를 동적으로 추가하도록 하면 됨.
*/
	
	
/* 2. 문서 객체 생성2 
// - 텍스트 노드 갖지 않는 노드 생성하는 방법.
//	 1) 웹표준이 정의하거나 웹브라우저가 지원하는 태그의 속성에만 사용할 수 있다. (아래와 같이 직접적인 접근에 경우!!)
		//document의 객체를 생성함!! => 반환받은 것에 대한 자료형은 object임.
		var img = document.createElement('img'); //이미지 태그를 생성하도록 한다. => 별도의 텍스트노드가 필요없음
		//어떤 이미지를 뿌릴 것인지에 대한 정보를 src속성을 통해 알려줘야 의미를 가지는 태그이다.
		
		//객체에 나중에 속성을 추가하려면 객체이름.키값 = '벨류값';으로 넣어주면 된다.
		//그 개념 하에 아래처럼 속성을 추가해주도록 한다. 
		img.src = './images/Koala.jpg'; //이미지 정보를 넣어주도록 한다.
		img.width = 500;
		
		document.body.appendChild(img); //body영역에 img를 연결하도록 한다.
		//동적으로 만든 코드를 소스코드의 맨 마지막에 추가되는 것을 확인할 수 있다.
		//클릭했을 때 이미지를 추가하고자 한다면 클릭이벤트에서 스크립트영역에 위 코드를 넣어주면 이미지가 짠하고 나타나게 된다. 
*/		
//	 2) 웹브라우저가 지원하지 않는 속성 => 위에처럼 나중에 추가하여 동적으로 사용할 수 없음.
		var img = document.createElement('img'); 
		img.setAttribute('src', './images/Koala.jpg'); //공식적으로 지원하는 속성도 이렇게 작업할 수 있음
		img.setAttribute('width', '500');
		//공식적으로 지원하지 않는 속성을 추가적으로 추후에 넣어주고자 한다면 setAttribute를 통해 지정하도록 한다.
		img.setAttribute('data-property', '350');
		
		document.body.appendChild(img);

/* 2. 문서 객체 생성3 */  
// - 문서 객체의 innerHTML 속성 사용해 객체 생성.


/* 3. 문서 객체 가져오기1 */
// - 웹페이지에 이미 존재하는 HTML 태그를 자바스크립트로 가져오는 방법.
// - getElementById() 메서드는 한 번에 한가지 문서 객체만 가져올 수 있다.

	
/* 3. 문서 객체 가져오기2 */ 
// - getElementsByTagName('tagName')
//   : tagName과 일치하는 문서 객체를 배열로 가져옴.
// - getElementsByName(name)
//   : 태그의 name 속성이 name과 일치하는 문서 객체를 배열로 가져옴.
// - getElementsByClassName('className')
 

/* 4. 문서 객체의 스타일 조작 */

/* 5. 문서 객체 제거 */
// - 방법1 : body 문서 객체 바로 아래에 제거하고자 하는 문서객체가 있을 때 가능한 코드.
// - 방법2 : 일반적으로 문서 객체를 제거 할 때 사용하는 코드.


/* 6. 문서객체를 활용한 예제 */

};
</script>
</head>
<body>

	<h1 id="header_1">HEADER-1</h1>

<!--
 	<img src="image.jpg" />

	<div>
		<h1 id="header_2" class="" name="">HEADER-2</h1>
	</div>

	<h1 id="clock"></h1> 
-->

</body>
</html>


