<!-- 자바스크립트의 코드들을 일일히 작성하여 작업하기에는 번거로움이 있음.
     자주 사용하는 기능들을 묶음으로 제공하는 라이브러리가 있음
	 
	 기능의 묶음을 라이브러리라고 부름. 
     자바스크립트의 대표적인 라이브러리가 jQuery로 제공을 해주고 있음
     => jQuery는 별도로 다운로드를 받아서 사용을 해야 한다. -->

<!-- jQuery 기본
	1. jQuery 개요
		- 모든 브라우저에서 동작하는 클라이언트 자바스크립트 라이브러리. (기능의 묶음)
		- 다음의 기능을 위해 제작
			. DOM(문서객체모델)과 관련된 처리를 쉽게 구현 
			. 일관된 이벤트 연결을 쉽게 구현
			. 시각적 효과를 쉽게 구현
			. ajax 애플리케이션을 쉽게 구현

		- http://jquery.com => min으로 되어 있는 것이 압축된 버전임
		  압축이 되어져 있는 버전(여백이 없음)과 압축이 되어져 있지 않은 버전(여백이 있음)의 차이점은 여백에 대한 차이점만 있음
		  따라서 압축된 버전이든 압축이 되지 않은 버전이든 동작상에 차이가 없기 때문에 둘 중에 하나를 알아서 사용하면 됨
		  
		- jQuery 사용 방법
			1) 직접 다운받아 사용하는 방법. 
			2) CDN 호스트 사용하는 방법.
			   -> 꼭 라이브러리를 다운받아서 처리를 해야하는 것은 아니다.
			      네트워크만 연결이 되어져 있다면 실시간적으로 읽어오면서 처리할 수 있음
				 . Content Delivery Network
				 . 사용자에게 간편하게 콘텐츠를 제공하는 방식을 의미.
				 . 구글, 마이크로소프트, jQuery측에서 사용자가 jQuery를 사용하기 편하게 콘텐츠를 제공.
-->


<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>jQuery 태그 구조</title>
  
<!-- 9. jQuery를 사용한 배열 관리(2)를 위한 예제 --> 
<style type="text/css">
	.high-light { background:yellow; }
	.high-light-0 { background:yellow; }
	.high-light-1 { background:orange; }
	.high-light-2 { background:blue; }
	.high-light-3 { background:green; }
	.high-light-4 { background:red; }
</style>
  
<!-- 방법1. 직접 라이브러리를 다운로드 받아서 import를 해주는 방법 -->
<script src="./js/jquery-3.6.3.js"></script> <!--  -->
<!-- 
	 지정된 파일의 코드 전체가 포함되어지는 것이다. 
     이렇게 포함이 되어지면 아래에 포함된 코드들이 
     다이렉트로 파일에 포함된 기능들을 사용할 수 있게 되는 것이다.
     
     라이브러리 사이즈가 초경량사이즈임!! -> 따라서 프로젝트를 진행할 때 별도의 파일을 통해 포함시키도록 한다.
     또한, 네트워크에 상관없이 작업이 가능하다는 장점을 가지고 있음. 
-->
     
<!-- 방법2. CDN 방식 : 홈페이지에서 제공하는 URL만 잘 걸어두면 됨.
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.6.3/jquery.min.js"></script> 구글사 
 -> 라이브러리를 다운로드하지 않더라도 홈페이지 내에서 제공하는 링크를 걸어서 사용할 수 있다.
    전제 조건) 컴퓨터가 네트워크에 연결이 되어 있어야만 해당 기능들을 사용할 수 있다. -> 단점임(네트워크가 연결 안될 시 동작이 안됨) 

or <script src="https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.6.3.js"></script> 마이크로소프트사 
-->

<script type="text/javascript">
/* 1. 라이브러리 포함 방법 : 2가지 방식 */
// - 방법1. 방법2 참조

/* 2. jQuery를 사용한 웹 페이지 형식   
//window.jQuery = window.$ = jQuery; => 라이브러리 소스 마지막에 작성되어져 있었음
//원래 자바스크립트는 jQuery라는 함수를 공식이름으로 제공을 해주고 있다.
//jQuery라고 전부 다 타이핑을 하면 함수를 호출할 때마다 이 이름을 다 타이핑을 해야하기 때문에
//window객체에 $라는 특수문자를 이용해서 이름을 등록해주도록 했다.
//그렇게 window에도 jQuery라는 이름을 등록하고 있는 것이다.
//즉, window객체에서 제공해주고 있는 메소드들인 alert, prompt, confirm을 호출하려면 window.을 통해 프롬프트로 호출을 해야했지만 window객체의 브라우저에 한해서 생략이 가능했었다. 
//즉, 윈도우 객체의 표시로 등록을 해두면 jQuery를 사용할 때 $기호 하나로 동일한 동작이 되게끔 정의를 해준 것임

// jQuery와 자바스크립트는 밀접한 관계를 가지고 있음
// jQuery도 특정 태그에 접근해서 동적효과를 부여하고 싶은 것이기 때문에 body영역을 전제적으로 다 읽고난 이후에 부여해야 하는 것이다.
// => body영역이 다 올라오고 난 다음에 정적인 화면에 추가적인 태그들을 덧붙이거나 수정하거나 제거하는 동적효과를 부여하고자 하는 것이 자바스크립트의 사용목적임
// [jQuery의 호출 방법]
//	 - jQuery()
//	 - $(document).ready(function(){}); : 자신이 필요로 하는 동작을 입력으로 document객체를 전달받아 처리되어지게끔 한다.
//		.문서가 준비 완료되면 매개변수로 전달된 함수를 실행하라는 의미.
//		.많이 사용되어지는 메소드이다 보니까 $(function(){});로 간단한 형식으로도 정의해서 사용을 하게끔 융통성을 발휘해준다.
//   위 함수를 호출하면 jQuery의 객체를 반환해준다. (자신의 작업을 수행할 수 있는 주체가 되는 객체를 반환해주는 것임)
//   - jQuery객체의 메소드 중에 ready()가 있음_ready()는 이벤트 함수임(입력으로 함수를 전달받음)!! 
//     => 기능은 body영역을 다 읽어갔을 때 jQuery가 감시하고 있다가 다 읽어간 순간 입력으로 전달한 함수를 실행하도록 한다.


//ready()메소드도 입력으로 전달받은 함수를 잘 보관하고 있게됨 => 실행하면 body를 감시하다가 다 읽어간 순간 입력으로 전달받은 함수를 한번만 호출해줌
//자바스크립트의 onload의 이벤트 헨들러와의 동작의미가 동일하다. => onload와 같은 시점에 동작되게끔 jQuery에서 제공하고 있는 메소드인 것이다.
//즉, 자바스크립트에서의 똑같은 환경에서 작업을 진행하도록 하는 것이다.

	$(document).ready(function(){
		alert('First Ready');
	});
	//ready()메소드는 또 다른 장점이 존재 
	//=> onload()는 하나만 등록할 수 있었다. 하지만 ready()메소드는 갯수에 제한없이 얼마든지 추가적으로 등록을 할 수 있다!! 
	//   (메소드다 보니까 여러 번 등록 가능_자바스크립트는 이벤트헨들러를 하나만 등록 가능)
	//하나만 등록하고 여러 개 등록할 수 있는것에 대해 어떤 장점을 얻어갈 수 있는지?
	//동적인 작업 코드는 script태그 안에서 하고, script태그는 갯수와 위치에 제한이 없다.
	//화면을 구성을 하다보면 중간 중간에 화면이 출력될 때 자바스크립트를 이용해서 body영역이 올라간 다음에 동작사항이 생길 수 있다.
	//한곳에 작성을 하다보면 동작에 대한 가독성이 떨어지기 때문에 동작사항이 발생되는 부분마다 추가를 하면서 가독성이 높은 코드를 작성할 수 있음.
	
	$(document).ready(function(){
		alert('Second Ready');
	});
	
	$(document).ready(function(){
		alert('Third Ready');
	});
	
	$(document).ready(function(){
		alert('Fourth Ready');
	});
	//화면상에 이벤트 출력 메시지가 화면보다 늦게 뜬다면 이벤트가 실행이 잘 안된 것인지 의문이 든다면?
	//기능은 소스코드를 다 읽어갔다는 것이지 화면상에 출력을 했다는 것이 아님. 
	//화면에 띄우는 동작은 또 다른 액션임 -> 화면을 띄우는 퍼포먼스 시간은 오래 걸림
*/ 	
	


/* 3. jQuery 기본 선택자 
      => 자바스크립트에서는 document객체를 통해서 getElementById를 통해서 접근했었음. 
      즉, 메소드를 활용해서 객체를 생성하여 접근했음 상당히 번거로움
      jQuery는 CSS처럼 대상에 접근할 수 있는 선택자 개념을 제공해줌 */
// - jQuery 메서드의 가장 기본적인 형태
//   . 문서 객체를 다룰 때 사용하는 형태
//   . jQuery에서 가장 많이 사용하는 형태

$(document).ready(function(){ //이벤트가 끝난다음에 코드를 구성하도록 감싸주도록 함.
// 1) 전체 선택자(*)
	$('*').css('color', 'red');
	//jQuery입력으로 전체선택자를 넣어주면서 css를 적용.
	

// 2) 태그 선택자


// 3) 아이디 선택자


// 4) 클래스 선택자

});


/* 4. jQuery 자식(손)선택자와 후손 선택자
// - 자식(손) 선택자

	
// - 후손 선택자

*/	
	
/* 5. jQuery 속성 선택자  */
//- 기본 선택자 뒤에 붙여 사용.
//- 입력 양식과 관련된 태그를 선택할 때 많이 사용.


  

/* 6. jQuery 필터 선택자 */
// 1) 입력 양식 필터 선택자 
// .input:button
// .input:checkbox
// .input:radio
// .input:file
// .input:image
// .input:password
// .input:text
// .input:submit
// .input:reset

// .요소:checked
// .요소:disabled
// .요소:enabled
// .요소:focus
// .요소:selected


	

// 2) 위치 필터 선택자
//   . 선택자를 사용해 문서 객체를 선택한 후에 다음과 같은 위치를 지정한다.
//    >> 요소:odd -> 홀수 번째에 위치한 문서 객체 선택.
//    >> 요소:even -> 짝수 번째에 위치한 문서 객체 선택.
//    >> 요소:first -> 첫번째에 위치한 문서 객체 선택.
//    >> 요소:last -> 마지막에 위치한 문서 객체 선택.



// 3) 함수 필터 선택자
//   >> 요소:contains(문자열)
//       ->특정 문자열을 포함하는 문서 객체를 선택.
//   >> 요소:eq(n)
//       ->n번째에 위치하는 문서 객체를 선택.
//   >> 요소:gt(n)
//       ->n번째 초과하는 위치에 있는 문서 객체를 선택.
//   >> 요소:has(h1)
//       ->h1 태그를 가지고 있는 문서 객체를 선택.
//   >> 요소:lt(n)
//       ->n번째 미만에 위치하는 문서 객체를 선택.
//   >> 요소:not(선택자)
//       ->선택자와 일치하지 않는 문서 객체를 선택.
//   >> 요소:nth-child(3n+1) 
//       -> 3n+1번째에 위치하는 문서 객체를 선택(인덱스 1부터 카운팅).




/* 7. jQuery를 사용한 배열 관리(1) */
// - each() 메서드 사용
//    . 매개 변수로 입력한 함수 사용.
//    . for in 반복문처럼 객체나 배열의 요소 검사하는 메서드

// - each() 메서드의 형태


/* 8. jQuery를 사용한 배열 관리(2) */
// - 각 객체에 서로 다른 class 속성을 설정하고 싶을 때 each() 메서드 사용.


/* 9. jQuery를 사용한 객체 확장 */ 


/* 10. jQuery 라이브러리 충돌 방지 */
// - jQuery외 prototype 자바스크립트 라이브러리도 동일하게 $를 
//    식별자로 사용. 
// - 따라서 두 라이브러리를 함께 사용시 충돌 발생.


</script>
</head>
<body>
<!-- 3-1/3-2. 전체/태그 선택자 -->
	<h1>Lorem ipsum</h1>
	<p>Lorem ipsum dolor sit amet.</p>
	<h1>Lorem ipsum</h1>
	<p>Lorem ipsum dolor sit amet.</p>
	<hr>

<!-- 3-3. 아이디 선택자 -->
	<h1>Header-0</h1>
    <h1 id="target">Header-1</h1>
    <h1>Header-2</h1>
    <hr>


<!-- 3-4. 클래스 선택자 -->
    <h1 class="item">Header-0</h1>
    <h1 class="item select">Header-1</h1>
    <h1 class="item">Header-2</h1>
    <hr>
 
<!-- 4. 자식(손) 선택자와 후손 선택자 -->
	<div>
		<ul>
			<li>Apple</li>
			<li>Bag</li>
			<li>Cat</li>
			<li>Dog</li>
		</ul>
	</div>
    <hr>

<!-- 5. 속성 선택자 -->
    <input type="text"/></br>
    <input type="password"/></br>
    <input type="radio"/></br>
    <input type="checkbox"/></br>
    <input type="file"/></br>
    <hr>

<!-- 6-1. 입력 양식 필터 선택자 -->
	<select>
		<option>Apple</option>
		<option>Bag</option>
		<option>Cat</option>
		<option>Dog</option>
	</select>
    <hr>

<!-- 6-2/6-3. 필터선택자 -->
	<table border="1">
		<tr><th>이름</th><th>혈액형</th><th>지역</th></tr>
		<tr><td>홍길동</td><td>AB형</td><td>서울시 강남구</td></tr>
		<tr><td>홍길서</td><td>A형</td><td>서울시 마포구</td></tr>
		<tr><td>홍길남</td><td>B형</td><td>서울시 서초구</td></tr>
		<tr><td>홍길북</td><td>O형</td><td>서울시 송파구</td></tr>
		<tr><td>김길동</td><td>O형</td><td>서울시 영등포구</td></tr>
		<tr><td>이길동</td><td>A형</td><td>서울시 강서구</td></tr>
		<tr><td>박길동</td><td>B형</td><td>서울시 용산구</td></tr>
	</table>
	<hr>

<!-- 8. jQuery를 사용한 배열 관리(2) -->
	<h1>item - 0</h1>
	<h1>item - 1</h1>
	<h1>item - 2</h1>
	<h1>item - 3</h1>
	<h1>item - 4</h1>

</body>
</html>